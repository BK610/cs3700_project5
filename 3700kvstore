#!/usr/bin/env python

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

# Connect to the network. All messages to/from other replicas and clients will
# occur over this socket
sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
sock.connect(my_id)

last = 0

TOTAL_REPLICAS = len(replica_ids) + 1
HEARTBEAT_TIMEOUT = 0.1

#election_timeout = time.time() + gen_election_timeout()

class State:
	FOLLOWER = 0
	CANDIDATE = 1
	LEADER = 2


class Replica:

	def __init__(self):

		self.term = 0
		self.votedFor = None
		self.voteCount = -1
		self.log = []
		self.state = State.FOLLOWER
		self.timeStamp = time.time()
		self.electionTimeout = rand_election_timeout()
		self.leader = 'FFFF'
		self.data = {}

		# state
		# 		

	def process_message(self, msg):

		#if len(raw_msg) == 0: return

		if msg['type'] in ['get', 'put']:

			response = None
			
			if (self.leader == my_id):
				#print("you have found the leader")	
				if msg['type'] == 'get':
					key = msg['key']

					if key in self.data:
						
						#response = {'src': my_id, 'dst': msg['src'], 'leader': replica.leader, 'type': 'ok', 'MID': msg['MID'], 'value': replica.data[key]}
						replica.send_client_message(msg['src'], 'ok', msg['MID'], replica.data[key])
					else:
						
						#response = {'src': my_id, 'dst': msg['src'], 'leader': replica.leader, 'type': 'ok', 'MID': msg['MID'], 'value': ""}
						replica.send_client_message(msg['src'], 'ok', msg['MID'], "")
					
					#sock.send(json.dumps(msg2))
				else:
					key = msg['key']
					val = msg['value']
		
					replica.data[key] = val
					
					#response = {'src': my_id, 'dst': msg['src'], 'leader': replica.leader, 'type': 'ok', 'MID': msg['MID']}
					
					replica.send_client_message(msg['src'], 'ok', msg['MID'])

					#sock.send(json.dumps(msg2))


			elif (replica.leader == 'FFFF'):

                        	#response = {'src': my_id, 'dst': msg['src'], 'leader': replica.leader, 'type': 'fail', 'MID': msg['MID']}
				self.send_client_message(msg['src'], 'fail', msg['MID'])
				print("fail, try again")
			else:
				self.send_client_message(msg['src'], 'redirect', msg['MID'])
				#response = {'src': my_id, 'dst': msg['src'], 'leader': replica.leader, 'type': 'redirect', 'MID': msg['MID']}
				
			#sock.send(json.dumps(response))


		elif (msg['type'] == 'voteRequest'):

			potential_candidate = msg['src']	
			candidate_term = msg['term']

			print("I am " + my_id + " and I recieved a vote request from " + potential_candidate)
			

			if candidate_term > self.term:
				self.state = State.FOLLOWER
				self.votedFor = potential_candidate
				vote_msg = {'src': my_id, 'dst': potential_candidate, 'leader': self.leader, 'type': 'vote'}
				sock.send(json.dumps(vote_msg))
				self.term = candidate_term
			
				self.reset_clock()
				#self.timeStamp = time.time()
				#self.electionTimeout = rand_election_timeout()


		elif (msg['type'] == 'vote'):
			
			print("I am " + my_id + " and " + msg['src'] + " voted for me!")
			self.voteCount += 1

			if (self.voteCount > TOTAL_REPLICAS / 2 + 1):
				print(my_id + "wins!")
				self.state = State.LEADER
				self.voteCount = -1
				self.votedFor = None
				self.leader = my_id
				for repID in replica_ids:
					msg = {'src': my_id, 'dst': repID, 'leader': self.leader, 'type': 'heartbeat', 'term': self.term}
					sock.send(json.dumps(msg))
				self.timeStamp = time.time()
					

		elif (msg['type'] == 'heartbeat'):
		
			#print(my_id + " recieved heart beat from " + msg['src'])
			self.reset_clock()
			#self.timeStamp = time.time()
			#self.electionTimeout = rand_election_timeout()				

			self.leader = msg['src']
			self.state = State.FOLLOWER
			self.voteCount = -1
			self.votedFor = None
			
			




		if self.state == State.LEADER:
			self.leader_process(msg)
		elif self.state == State.CANDIDATE:
			self.candidate_process(msg)
		else:
			self.follower_process(msg)


	def leader_process(self, msg):
		pass

	def candidate_process(self, msg):
		pass

	def follower_process(self, msg):
		pass

	def time_handle(self):

		#global HEARTBEAT_TIMEOUT

		clock = time.time()

		#print(str(clock) + " vs " + str(self.timeStamp + self.electionTimeout))


		if self.state == State.LEADER:
			if clock > self.timeStamp + HEARTBEAT_TIMEOUT:
				for repID in replica_ids:
					msg = {'src': my_id, 'dst': repID, 'leader': my_id, 'type': 'heartbeat', 'term': self.term}
					sock.send(json.dumps(msg))



		elif clock > self.timeStamp + self.electionTimeout:
			#print(str(clock) + " vs " + str(self.timeStamp + self.electionTimeout))
			print(my_id + " timed out!")
			self.reset_clock()
			#self.timeStamp = clock
			#self.electionTimeout = rand_election_timeout()
			
			if self.state == State.FOLLOWER:
				self.state == State.CANDIDATE
				self.term += 1

				if self.votedFor is None:
					self.votedFor = my_id
					self.voteCount = 1
				
				# send vote requests				
				for repID in replica_ids:
					msg = {'src': my_id, 'dst': repID, 'leader': replica.leader, 'type': 'voteRequest', "term": self.term}
					sock.send(json.dumps(msg))
	
	def reset_clock(self):
		self.timeStamp = time.time()
		self.electionTimeout = rand_election_timeout()	


	def send_client_message(self, dst, typee, mid, value = None):

		if value is not None:
			msg = {'src': my_id, 'dst': dst, 'leader': self.leader,'type': typee, 'MID': mid, 'value': value}
			sock.send(json.dumps(msg))
		else:
			msg = {'src': my_id, 'dst': dst, 'leader': self.leader, 'type': typee, 'MID': mid}
			sock.send(json.dumps(msg))




def rand_election_timeout():
	return random.randint(150, 300) / 1000.0


replica = Replica()

print("my id is " + my_id + "and my timeout is " + str(replica.electionTimeout))

while True:
	ready = select.select([sock], [], [], 0.1)[0]
	
	if sock in ready:
		msg_raw = sock.recv(32768)
		
		if len(msg_raw) == 0: continue
		msg = json.loads(msg_raw)
		
		
		# Handle noop messages. This may be removed from your final implementation
		replica.process_message(msg)
		#print '%s received a NOOP from %s' % (msg['dst'], msg['src'])
		
	clock = time.time()

	replica.time_handle()

	if clock-last > 2:
		# Send a no-op message to a random peer every two seconds, just for fun
		# You definitely want to remove this from your implementation
		msg = {'src': my_id, 'dst': random.choice(replica_ids), 'leader': 'FFFF', 'type': 'noop'}
		sock.send(json.dumps(msg))
		#print '%s sending a NOOP to %s' % (msg['src'], msg['dst'])
		last = clock
