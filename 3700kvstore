#!/usr/bin/env python
import sys
import socket
import select
import time
import json
import random


class State:
        '''
        Represents an enumeration for the possible states of a replica.
        '''
	FOLLOWER = 0
	CANDIDATE = 1
	LEADER = 2

class Replica:
        '''
        Represents a replica within a distributed system.
        Fields:
        id - String, ID of this Replica
        replica_ids - [String], IDs of all connected replicas
        term - Number, Current election term
        votedFor - Replica, Who this Replica voted for. Only used during an
            election
        voteCount - Number, How many election votes this Replica received. Only
            used during an election
        log - [String], List of all log entries
        state - State, Current state. One of [Follower, Candidate, Leader]
        timeStamp - Double, Used to keep track of the last time that this
            Replica sent a message (Leader, Candidate) or received a message
            (Follower)
        electionTimeout / Double, Random millisecond value between 150 and 300,
            used to calculate timeouts during election
        heartbeatTimeout - Double, Timeout value to trigger sending heartbeats
        leader - String, 4-character hexadecimal ID for the identified leader
        data - {Key: Value}, Dictionary to store key-value pairs
        '''
	def __init__(self, id, replica_ids):
                # Persistent state (on all servers)
                self.id = id
                self.replica_ids = replica_ids
		self.term = 0
		self.votedFor = None
		self.voteCount = -1
		self.log = []
		self.state = State.FOLLOWER
		self.timeStamp = time.time()
		self.electionTimeout = rand_election_timeout()
                self.heartbeatTimeout = 0.04
		self.leader = 'FFFF'
		self.data = {}

                # Connect to the network. All messages to/from other replicas and clients will
                # occur over this socket
                self.sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
                self.sock.connect(self.id)

                # Volatile state (on all servers)
                self.commitIndex = -1
		self.lastApplied = -1

                # Volatile state (on leaders)
                self.nextIndex = {}
                self.matchIndex = {}

                for repID in self.replica_ids:
                    self.nextIndex[repID] = 0
                    self.matchIndex[repID] = -1

	def process_message(self, msg):
                '''
                Process a message received by this Replica. Determines the type
                    of message and redirects to the correct method.
                Arguments:
                msg - String, received message from a client
                '''
		if msg['type'] in ['get', 'put']:
                        self.handle_get_put(msg)
			return

		sender_term = msg['term']
		if (sender_term > self.term):
			self.term = sender_term
			self.state = State.FOLLOWER
			self.votedFor = None
			self.leader = 'FFFF'

		if (msg['type'] == 'voteRequest'):
                        self.handle_vote_request(msg)

		elif (msg['type'] == 'vote'):
                        self.handle_vote(msg)

		elif (msg['type'] == 'heartbeat'):
		        self.handle_heartbeat(msg)

                elif msg['type'] == 'heartbeatResponse':
                        self.handle_heartbeat_response(msg)

        def handle_get_put(self, msg):
                '''
                Handle GET and PUT messages
                Arguments:
                msg - String, received GET or PUT message
                '''
                # If the leader, actually handle
                if (self.leader == self.id):
                        #print("you have found the leader")

                        if msg['type'] == 'get':
                                key = msg['key']

                                if key in self.data:
                                        self.send_client_message(msg['src'], 'ok', msg['MID'], self.data[key])
                                # Respond with ok + empty string if we don't have the Key Value pair
                                else:
                                        self.send_client_message(msg['src'], 'ok', msg['MID'], "")

                        else:
				self.log.append({'command': msg, 'term': self.term})

                                key = msg['key']
                                val = msg['value']

                                self.data[key] = val

                                self.send_client_message(msg['src'], 'ok', msg['MID'])


                # Don't know who the leader is, fail
                elif (self.leader == 'FFFF'):
                        self.send_client_message(msg['src'], 'fail', msg['MID'])
                        #print("fail, try again")

                # Know who the leader is, redirect to them
                else:
                        self.send_client_message(msg['src'], 'redirect', msg['MID'])

        def handle_vote_request(self, msg):
                '''
                Handle vote request messages.
                Arguments:
                msg - String, received vote request message
                '''
                potential_candidate = msg['src']
                candidate_term = msg['term']
		candidate_last_log_index = msg['lastLogIndex']
		candidate_last_log_term = msg['lastLogTerm']

                #print("I am " + self.id + " and I recieved a vote request from " + potential_candidate)

		if candidate_term < self.term:
			vote_msg = {'src': self.id,
			   'dst': potential_candidate,
			   'leader': self.leader,
			   'type': 'vote',
			   'term': self.term,
			   'voteGranted': False}
			self.sock.send(json.dumps(vote_msg))
			return

		self_last_log_term = self.log[len(self.log) - 1]['term'] if len(self.log) > 0 else 0

                if ((self.votedFor == None or self.votedFor == potential_candidate) and
		      (candidate_last_log_term == self_last_log_term and candidate_last_log_index >= len(self.log) - 1) or
		      (candidate_last_log_term > self_last_log_term)):
                        self.state = State.FOLLOWER
                        self.votedFor = potential_candidate
                        vote_msg = {'src': self.id,
                            'dst': potential_candidate,
                            'leader': self.leader,
                            'type': 'vote',
                            'term': self.term,
                            'voteGranted': True}

                        self.sock.send(json.dumps(vote_msg))
                        self.term = candidate_term

                        self.reset_clock()

        def handle_vote(self, msg):
                '''
                Handle vote messages.
                Arguments:
                msg - String, received vote message
                '''

		if (msg['voteGranted']):
                	#print("I am " + self.id + " and " + msg['src'] + " voted for me!")
             		self.voteCount += 1

                	total_replicas = len(self.replica_ids) + 1

                	if (self.voteCount > total_replicas / 2 + 1):
                        	#print(self.id + " wins!")
                        	self.state = State.LEADER
                        	self.voteCount = -1
                        	self.votedFor = None
                        	self.leader = self.id
                        	self.send_heartbeats()
                        	self.timeStamp = time.time()

                                # Reset nextIndex and matchIndex values
                                for RepID in self.replica_ids:
                                        self.nextIndex[RepID] = len(self.log) - 1
                                        self.matchIndex[RepID] = 0
		else:
			pass
                        #print("refused vote")

        def handle_heartbeat(self, msg):
                '''
                Handle heartbeat messages.

                1. False if msg['term'] < self.term
                2. False if log doesn't contain an entry at prevLogIndex whose
                    term matches prevLogTerm
                3. If an existing entry conflicts with a new one, delete it and
                    all that follow
                4. Append any new entries not already in the log
                5. If leaderCommit > commitIndex,
                    set commitIndex = min(leaderCommit, index of last new entry)

                Arguments:
                msg - String, received heartbeat message
                '''
                #print(self.id + " recieved heart beat from " + msg['src'])
		
		leaderID = msg['src']
		leaderTerm = msg['term']
		leaderEntries = msg['entries']
		leaderCommitIndex = msg['leaderCommit']
                prevLogIndex = msg['prevLogIndex']
                prevLogTerm = msg['prevLogTerm']

                # Handling the case where the log is empty
                if prevLogIndex == -1:
                        # Set state
                        self.leader = leaderID
                        self.state = State.FOLLOWER
                        self.voteCount = -1
                        self.votedFor = None

                        for entry_index in range(prevLogIndex + 1, len(leaderEntries)):
                                #print("Adding entry " + str(entry_index) + " to " + self.id)
                                self.log.append(leaderEntries[entry_index])

                        response = {'src': self.id, 'dst': leaderID, 'leader': self.leader, 'type': "heartbeatResponse", 'term': self.term, 'success': True, 'log_length': len(self.log)}
                        self.sock.send(json.dumps(response))

                        self.reset_clock()
                        return

                entryAtPrevLogIndex = self.log[prevLogIndex]
                leaderEntry = leaderEntries[0]

                # Steps 1 and 2
                if (leaderTerm < self.term
                        or entryAtPrevLogIndex['term'] != leaderEntry['term']):
                        # Send failure
                        response = {'src': self.id, 'dst': leaderID, 'leader': self.leader, 'type': "heartbeatResponse", 'term': self.term, 'success': 'False', 'log_length': len(self.log)}
                        self.sock.send(json.dumps(response))

                        self.reset_clock()
                        return

                leaderIndex = 1

                # Step 3
                for entry_index in range(prevLogIndex + 1, len(self.log) - 1):
			if leaderIndex >= len(leaderEntries):
				break

			entryAtPrevLogIndex = self.log[entry_index]
                        leaderEntry = leaderEntries[leaderIndex]
                        if (entryAtPrevLogIndex['term'] != leaderEntry['term']
                                or entryAtPrevLogIndex['command']['MID'] != leaderEntry['command']['MID']):

				# send fail message
                                del self.log[prevLogIndex:]
                                break

                        prevLogIndex += 1
                        leaderIndex += 1

		self.leader = leaderID

                # Step 4
                for entry in leaderEntries[1:]:
                        self.log.append(entry)

                # Step 5
                if leaderCommitIndex > self.commitIndex:
                        self.commitIndex = min(leaderCommitIndex, len(self.log) - 1)

                # Set state
                #self.leader = leaderID
                self.state = State.FOLLOWER
                self.voteCount = -1
                self.votedFor = None

                # Send success
	        response = {'src': self.id, 'dst': leaderID, 'leader': self.leader, 'type': "heartbeatResponse", 'term': self.term, 'success': True, 'log_length': len(self.log)}
		self.sock.send(json.dumps(response))

                self.reset_clock()

        def handle_heartbeat_response(self, msg):
                '''
                Handle heartbeat response messages.
                Arguments:
                msg - String, received heartbeat response message
                '''
		success = msg['success']		

		if success:
  	        	self.matchIndex[msg['src']] = msg['log_length'] - 1
	                self.nextIndex[msg['src']] = min(len(self.log), msg['log_length'])

               		quorum_list = self.matchIndex.values()
        	        quorum_list.append(len(self.log) - 1)
                	quorum_list.sort()
                
			quorum_val = quorum_list[2]
		
			if (quorum_val == -1):
				return
			#print(quorum_list)

			quorum_val_term = self.log[quorum_val]['term'] if len(self.log) > quorum_val else len(self.log) - 1
			if (quorum_val_term == self.term):
				self.commitIndex = min(quorum_val, len(self.log))
                else:
			self.nextIndex[msg['src']] -= 1

        def send_heartbeats(self):
                #print("Sending heartbeats from " + self.id)
                for repID in self.replica_ids:
                        prevLogIndex = self.nextIndex[repID] - 1
                        prevLogTerm = -1 if prevLogIndex == -1 else self.log[prevLogIndex]['term']
			leaderEntryEnd = min(prevLogIndex + 20, len(self.log))
                        msg = {'src': self.id,
                            'dst': repID,
                            'leader': self.id,
                            'type': 'heartbeat',
                            'term': self.term,
                            'leaderCommit': self.commitIndex,
                            'entries': self.log[prevLogIndex:leaderEntryEnd],
                            'prevLogIndex': prevLogIndex,
                            'prevLogTerm': prevLogTerm}
                        self.sock.send(json.dumps(msg))
		self.timeStamp = time.time()

        def send_vote_requests(self):
                for repID in self.replica_ids:
			lastLogTerm = self.log[len(self.log) - 1]['term'] if len(self.log) > 0 else 0
                        msg = {'src': self.id,
                            'dst': repID,
                            'leader': self.id,
                            'type': 'voteRequest',
                            'term': self.term,
                            'lastLogIndex': len(self.log) - 1,
                            'lastLogTerm': lastLogTerm}
                        self.sock.send(json.dumps(msg))

	def time_handle(self):
                '''
                Handles all time-dependent activity for this Replica.
                AKA Sending periodic messages and timing out.
                '''
		clock = time.time()

                while self.commitIndex > self.lastApplied:
                	self.lastApplied += 1
                        msg = self.log[self.lastApplied]['command']

                        key = msg['key']
                        val = msg['value']

                        self.data[key] = val

                        self.send_client_message(msg['src'], 'ok', msg['MID'])

		if self.state == State.LEADER:
                        # Send heartbeats
			if clock > self.timeStamp + self.heartbeatTimeout:
                                self.send_heartbeats()

		elif clock > self.timeStamp + self.electionTimeout:
			#print(self.id + " timed out!")
			self.reset_clock()
                        self.state == State.CANDIDATE
                        self.term += 1

                        if self.votedFor is None:
                                self.votedFor = self.id
                                self.voteCount = 1

                        # send vote requests
                        self.send_vote_requests()

	def reset_clock(self):
                '''
                Reset this Replica's timeStamp and electionTimeout fields
                '''
		self.timeStamp = time.time()
		self.electionTimeout = rand_election_timeout()

	def send_client_message(self, dst, typee, mid, value = None):
                '''
                Send a message to the client using the values input as arguments
                Arguments:
                dst - String, message destination, pulled from previous message
                type - String, message type
                mid - String, message MID, pulled from previous message
                value - String, message Value. Defaults to None for messages
                    that do not contain a Value to be sent
                '''
		if value is not None:
			msg = {'src': self.id, 'dst': dst, 'leader': self.leader,'type': typee, 'MID': mid, 'value': value}
			self.sock.send(json.dumps(msg))
		else:
			msg = {'src': self.id, 'dst': dst, 'leader': self.leader, 'type': typee, 'MID': mid}
			self.sock.send(json.dumps(msg))

def rand_election_timeout():
	return random.randint(450, 500) / 1000.0

def main(argvs):
        # Your ID number
        my_id = sys.argv[1]

        # The ID numbers of all the other replicas
        replica_ids = sys.argv[2:]

        replica = Replica(my_id, replica_ids)

        #print("My id is " + replica.id + "and my timeout is " + str(replica.electionTimeout))

        while True:
            ready = select.select([replica.sock], [], [], 0.1)[0]

            if replica.sock in ready:
                    msg_raw = replica.sock.recv(32768)

                    if len(msg_raw) == 0: continue

                    msg = json.loads(msg_raw)
                    replica.process_message(msg)

            replica.time_handle()

if __name__ == "__main__":
        main(sys.argv)
